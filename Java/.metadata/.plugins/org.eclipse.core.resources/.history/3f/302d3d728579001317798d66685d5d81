package pl.edu.agh.monitordb.test;

import org.hibernate.HibernateException;
import org.hibernate.Transaction;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.*;
import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;

public class SessionFactoryRule implements MethodRule {
	 private SessionFactory sessionFactory;
	 private Transaction transaction;
	 private Session session;
	 
	 @Override
	 public Statement apply(final Statement statement, FrameworkMethod method,
	   Object test) {
	  return new Statement() {
	 
	   @Override
	   public void evaluate() throws Throwable {
	    sessionFactory = createSessionFactory();
	    createSession();
	    beginTransaction();
	    try {
	     statement.evaluate();
	    } finally {
	     shutdown();
	    }
	   }
	 
	  };
	 }
	 
	 private void shutdown() {
	  try {
	   try {
	    try {
	     transaction.rollback();
	    } catch (Exception ex) {
	     ex.printStackTrace();
	    }
	    session.close();
	   } catch (Exception ex) {
	    ex.printStackTrace();
	   }
	   sessionFactory.close();
	  } catch (Exception ex) {
	   ex.printStackTrace();
	  }
	 }
	 
	 private SessionFactory createSessionFactory() {
	  AnnotationConfiguration configuration = new AnnotationConfiguration();
	  configuration.addAnnotatedClass(SuperHero.class)
	    .addAnnotatedClass(SuperPower.class)
	    .addAnnotatedClass(SuperPowerType.class);
	  configuration.setProperty("hibernate.dialect",
	    "org.hibernate.dialect.H2Dialect");
	  configuration.setProperty("hibernate.connection.driver_class",
	    "org.h2.Driver");
	  configuration.setProperty("hibernate.connection.url", "jdbc:h2:mem");
	  configuration.setProperty("hibernate.hbm2ddl.auto", "create");
	 
	  SessionFactory sessionFactory = configuration.buildSessionFactory();
	  return sessionFactory;
	 }
	 
	 public Session createSession() {
	  session = sessionFactory.openSession();
	  return session;
	 }
	 
	 public void commit() {
	  transaction.commit();
	 }
	 
	 public void beginTransaction() {
	  transaction = session.beginTransaction();
	 }
	 
	 public Session getSession() {
	  return session;
	 }
	}


