package pl.edu.agh.monitordb.test;

import static org.junit.Assert.*;

import java.io.Console;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.apache.commons.codec.digest.DigestUtils;
import org.easymock.EasyMock;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import pl.edu.agh.monitordb.MonitorService;
import pl.edu.agh.monitordb.hibernate.Users;
import pl.edu.agh.monitordb.hibernate.UsersInterface;
import pl.edu.agh.monitordb.hibernate.Values;

public class MonitorServiceMockTest {
	
	private SessionFactory sessionFactory;
	private Session session;
	private Criteria criteria;
	
	@Before
	public void before() {
		
		sessionFactory = EasyMock.createMock(SessionFactory.class);
	    session = EasyMock.createMock(Session.class);
	    criteria = EasyMock.createMock(Criteria.class);
	}
	
	@Test
	public void testAddData() {
		
		
		
	}
	
	@Test
	public void testCheckUser() throws NoSuchAlgorithmException, UnsupportedEncodingException, HibernateException {

		String userName = "wsuser";
		String pass = "wsuser";
		String passHash = DigestUtils.md5Hex(pass);
		
		Users user = new Users();
		user.setNameUser(userName);
		user.setPassUser(passHash);
		
		List<Users> users = new ArrayList<Users>();
		users.add(user);
		
		EasyMock.expect(sessionFactory.getCurrentSession()).andReturn(session);
		EasyMock.expect(sessionFactory.openSession()).andReturn(session);
		EasyMock.expect(session.createCriteria(UsersInterface.class)).andReturn(session);
		EasyMock.expect(criteria.add(Restrictions.eq("NameUser", userName))).andReturn(criteria);
		EasyMock.expect(criteria.add(Restrictions.eq("PassUser", passHash))).andReturn(criteria);
		EasyMock.expect(criteria.add(Restrictions.and(Restrictions.eq("NameUser", userName),Restrictions.eq("PassUser", passHash)))).andReturn(criteria);
		EasyMock.expect(criteria.uniqueResult()).andReturn(user);
		
		EasyMock.expect(criteria.list()).andReturn(users);
		
		//System.out.println(Restrictions.and(Restrictions.eq("NameUser", userName),Restrictions.eq("PassUser", passHash)));
		
		
		EasyMock.replay(sessionFactory, session, criteria);
		
		Session sessionTest = sessionFactory.openSession();
		Criteria crTest = sessionTest.createCriteria(UsersInterface.class);
		
		crTest.add(Restrictions.and(Restrictions.eq("NameUser", userName),Restrictions.eq("PassUser", passHash)));
        //List<Users> dbUsers = crTest.list();
		
        //assertEquals(1, dbUsers.size());
        //assertEquals(users, dbUsers);
	}
	
	
	@After
	public void after() {
		//session.close();
		//sessionFactory.close();
	}
	
}
